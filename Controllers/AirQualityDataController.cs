using Microsoft.AspNetCore.Mvc;
using Microsoft.Extensions.Logging;
using Newtonsoft.Json;
using System;
using System.Linq;
using System.Threading.Tasks;
using AirQuality.Models; // Import your models namespace if it's different
using Microsoft.EntityFrameworkCore;
using System.Text;
using Newtonsoft.Json.Linq;

namespace AirQuality.Controllers
{
    public class AirQualityDataController : Controller
    {
        private readonly ILogger<AirQualityDataController> _logger;
        private readonly AirQualityContext _context;

        public AirQualityDataController(AirQualityContext context, ILogger<AirQualityDataController> logger)
        {
            _context = context;
            _logger = logger;
        }

        [HttpGet]
        public async Task<IActionResult> AddOrEdit(int? id)
        {
            _logger.LogError("entered addedit");
            if (id == null)
            {
                // Return the view for adding new data
                return View(new AirQualityRecord());
            }
            else
            {
                // Fetch the record from the database using the id
                var airQualityData = await _context.AirQualityRecord.FindAsync(id);
                if (airQualityData == null)
                {
                    return NotFound();
                }

                // Return the view for editing with the existing data
                return View(airQualityData);
            }
        }

        public async Task<IActionResult> SaveData()
        {
            try
            {
                ReceivedDataModel receivedData = null;
                using (StreamReader reader = new StreamReader(Request.Body, Encoding.UTF8))
                {
                    var requestBody = await reader.ReadToEndAsync();
                    _logger.LogInformation("Received JSON data: " + requestBody);
                    receivedData = JsonConvert.DeserializeObject<ReceivedDataModel>(requestBody);
                    Console.WriteLine($"Received JSON data: {JsonConvert.SerializeObject(receivedData)}");
                }
                if (receivedData != null)
                {
                    Console.WriteLine($"Received JSON data: {JsonConvert.SerializeObject(receivedData)}");
                    // Check AirQualityIndicator
                    var existingIndicator = await _context.AirQualityIndicators
                        .FirstOrDefaultAsync(i =>
                            i.Name == receivedData.Name &&
                            i.Measure == receivedData.Measure &&
                            i.MeasureInfo == receivedData.MeasureInfo);

                    int indicatorId;

                    if (existingIndicator != null)
                    {
                        // An existing matching record was found, use its IndicatorID
                        indicatorId = existingIndicator.IndicatorID;
                        _logger.LogInformation("Using existing AirQualityIndicator with ID: " + indicatorId);
                    }
                    else
                    {
                        // No matching record found, insert a new record and get the autogenerated IndicatorID
                        var newIndicator = new AirQualityIndicator
                        {
                            Name = receivedData.Name,
                            Measure = receivedData.Measure,
                            MeasureInfo = receivedData.MeasureInfo,
                            // Populate other properties as needed
                        };

                        _context.AirQualityIndicators.Add(newIndicator);
                        await _context.SaveChangesAsync();
                        indicatorId = newIndicator.IndicatorID;
                        _logger.LogInformation("Inserted new AirQualityIndicator with ID: " + indicatorId);
                    }

                    // Check Location
                    var existingLocation = await _context.Locations
                        .FirstOrDefaultAsync(l =>
                            l.GeoType == receivedData.GeoTypeName &&
                            l.GeoPlaceName == receivedData.GeoPlaceName);

                    int locationId;

                    if (existingLocation != null)
                    {
                        // An existing matching record was found, use its LocationID
                        locationId = existingLocation.LocationID;
                        _logger.LogInformation("Using existing Location with ID: " + locationId);
                    }
                    else
                    {
                        // No matching record found, insert a new record and get the autogenerated LocationID
                        var newLocation = new Location
                        {
                            GeoType = receivedData.GeoTypeName,
                            GeoPlaceName = receivedData.GeoPlaceName,
                            // Populate other properties as needed
                        };

                        _context.Locations.Add(newLocation);
                        await _context.SaveChangesAsync();
                        locationId = newLocation.LocationID;
                        _logger.LogInformation("Inserted new Location with ID: " + locationId);
                    }

                    // Create an AirQualityData object
                    var airQualityData = new AirQualityData
                    {
                        TimePeriod = receivedData.TimePeriod,
                        StartDate = receivedData.StartDate,
                        DataValue = receivedData.DataValue,
                        IndicatorID = indicatorId,
                        LocationID = locationId,
                        UniqueID = Guid.NewGuid().ToString(),
                        Message = "Default Message"
                        // Populate other properties as needed
                    };

                    // Autopopulate UniqueID and DataID (you'll need to define the logic for these)

                    // Save the received JSON data to the database
                    _context.AirQualityData.Add(airQualityData);
                    await _context.SaveChangesAsync();

                    _logger.LogInformation("Saved JSON data to database. AirQualityData ID: " + airQualityData.DataID);
                    Response.Headers.Add("Cache-Control", "no-store");
                    return Ok(new { message = "Data saved successfully" }); // Return a 200 OK response
                }
                else
                {
                    _logger.LogWarning("Received JSON data is null or invalid.");
                    return BadRequest(); // Return a 400 Bad Request response if the data is null or invalid
                }
            }
            catch (Exception ex)
            {
                _logger.LogError("Error saving JSON data: " + ex.Message);
                return StatusCode(500); // Return a 500 Internal Server Error response on error
            }
        }

        [HttpGet]
        public async Task<IActionResult> Edit(int id)
        {
            try
            {
                // Fetch the record from the database using the id
                var airQualityData = await _context.AirQualityData.FindAsync(id);
                if (airQualityData == null)
                {
                    return NotFound(); // Return a 404 Not Found response if the data is not found
                }

                var LocationData = await _context.Locations.FindAsync(airQualityData.LocationID);
                if (LocationData == null)
                {
                    return NotFound();
                }

                var indicatorData= await _context.AirQualityIndicators.FindAsync(airQualityData.IndicatorID);
                if (indicatorData == null)
                {
                    return NotFound();
                }

                // Create an instance of AirQualityDataEdit and populate it with data from the database record
                var editModel = new AirQualityDataEdit
                {
                    DataID = airQualityData.DataID,
                    UniqueID = airQualityData.UniqueID,
                    IndicatorID = airQualityData.IndicatorID,
                    LocationID = airQualityData.LocationID,
                    TimePeriod = airQualityData.TimePeriod,
                    StartDate = airQualityData.StartDate,
                    DataValue = airQualityData.DataValue,
                    GeoPlaceName = LocationData.GeoPlaceName,
                    GeoTypeName = LocationData.GeoType,
                    Name= indicatorData.Name,
                    Measure= indicatorData.Measure,
                    MeasureInfo= indicatorData.MeasureInfo,
                    // Populate other properties as needed
                };


                return View("AirQualityDetailsEdit", editModel); // Return the view for editing with the existing data
            }
            catch (Exception ex)
            {
                _logger.LogError("Error fetching data for editing: " + ex.Message);
                return StatusCode(500); // Return a 500 Internal Server Error response on error
            }
        }


        [HttpPost]
        public async Task<IActionResult> UpdateData()
        {
            AirQualityDataEdit editModel = null;
            try
            {
                Console.WriteLine($"Entered update method");
                if (ModelState.IsValid)
                {
                    using (StreamReader reader = new StreamReader(Request.Body, Encoding.UTF8))
                    {
                        var requestBody = await reader.ReadToEndAsync();
                        _logger.LogInformation("Received JSON data: " + requestBody);
                        editModel = JsonConvert.DeserializeObject<AirQualityDataEdit>(requestBody);
                        Console.WriteLine($"Received JSON data: {JsonConvert.SerializeObject(editModel)}");
                    }
                    // Find the existing record in the database by DataID
                    var existingData = await _context.AirQualityData.FindAsync(editModel.DataID);

                    if (existingData == null)
                    {
                        return NotFound(); // Return a 404 Not Found response if the record doesn't exist
                    }

                    // Update the existing record with values from the editModel
                    existingData.DataValue = editModel.DataValue;
                    existingData.TimePeriod = editModel.TimePeriod;
                    existingData.StartDate = editModel.StartDate;

                    // Save changes to the database
                    _context.Update(existingData);
                    await _context.SaveChangesAsync();

                    return Ok(); // Return a 200 OK response on success
                }
                else
                {
                    return BadRequest(ModelState); // Return a 400 Bad Request response if ModelState is invalid
                }
            }
            catch (Exception ex)
            {
                _logger.LogError("Error updating data: " + ex.Message);
                return StatusCode(500); // Return a 500 Internal Server Error response on error
            }
        }



    }
}