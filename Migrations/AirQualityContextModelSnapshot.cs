// <auto-generated />
using System;
using AirQuality.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace AirQuality.Migrations
{
    [DbContext(typeof(AirQualityContext))]
    partial class AirQualityContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.13")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("AirQuality.Models.AirQualityData", b =>
                {
                    b.Property<int>("DataID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DataID"));

                    b.Property<double>("DataValue")
                        .HasColumnType("float");

                    b.Property<int>("IndicatorID")
                        .HasColumnType("int");

                    b.Property<int>("LocationID")
                        .HasColumnType("int");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("TimePeriod")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("UniqueID")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("DataID");

                    b.HasIndex("IndicatorID");

                    b.HasIndex("LocationID");

                    b.ToTable("AirQualityData");
                });

            modelBuilder.Entity("AirQuality.Models.AirQualityIndicator", b =>
                {
                    b.Property<int>("IndicatorID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IndicatorID"));

                    b.Property<string>("Measure")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("MeasureInfo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("IndicatorID");

                    b.ToTable("AirQualityIndicators");
                });

            modelBuilder.Entity("AirQuality.Models.Location", b =>
                {
                    b.Property<int>("LocationID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("LocationID"));

                    b.Property<string>("GeoPlaceName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("GeoType")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("LocationID");

                    b.ToTable("Locations");
                });

            modelBuilder.Entity("AirQuality.Models.AirQualityData", b =>
                {
                    b.HasOne("AirQuality.Models.AirQualityIndicator", "AirQualityIndicator")
                        .WithMany("AirQualityData")
                        .HasForeignKey("IndicatorID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AirQuality.Models.Location", "Location")
                        .WithMany("AirQualityData")
                        .HasForeignKey("LocationID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AirQualityIndicator");

                    b.Navigation("Location");
                });

            modelBuilder.Entity("AirQuality.Models.AirQualityIndicator", b =>
                {
                    b.Navigation("AirQualityData");
                });

            modelBuilder.Entity("AirQuality.Models.Location", b =>
                {
                    b.Navigation("AirQualityData");
                });
#pragma warning restore 612, 618
        }
    }
}
