<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Geographical Overview - NYC Air Quality</title>
    <link href="https://fonts.googleapis.com/css2?family=Open+Sans:wght@300;400;700&display=swap" rel="stylesheet">
    <style>
        body {
            font-family: 'Open Sans', sans-serif;
            margin: 0;
            padding: 0;
            background-color: #f4f4f4;
        }

        main {
            padding: 20px;
            background-color: #ffffff;
            box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
            margin: 20px auto;
            width: 80%;
            max-width: 1200px;
        }

        h2 {
            color: #333;
            border-bottom: 2px solid #007bff;
            padding-bottom: 10px;
            margin-bottom: 20px;
        }

        /* Styles for the table */
        .overview-table {
            width: 100%;
            border-collapse: collapse;
            margin-top: 20px;
        }

            .overview-table th, .overview-table td {
                border: 1px solid #ccc;
                padding: 10px 15px;
                text-align: left;
            }

            .overview-table tbody tr:hover {
                background-color: #e9ecef;
            }

        /* Styles for the CRUD buttons */
        .btn {
            padding: 8px 12px;
            margin-right: 10px;
            border: none;
            border-radius: 5px;
            cursor: pointer;
        }

            .btn.view {
                background-color: #007bff;
                color: #ffffff;
                padding: 10px 15px;
                border-radius: 25px;
                transition: background-color 0.3s, color 0.3s;
                border: 1px solid transparent;
            }

            .btn.edit {
                background-color: #f0db4f;
                color: #333;
                padding: 10px 15px;
                border-radius: 25px;
                transition: background-color 0.3s, color 0.3s;
                border: 1px solid transparent;
            }

            .btn.delete {
                background-color: #dc3545;
                color: #ffffff;
                padding: 10px 15px;
                border-radius: 25px;
                transition: background-color 0.3s, color 0.3s;
                border: 1px solid transparent;
            }

            .btn.add {
                background-color: #28a745;
                color: #ffffff;
                margin-bottom: 20px;
            }

        .btn-container .btn:not(:first-child) {
            margin-top: 5px; /* Adds space between wrapped buttons */
        }

        .actions {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 20px;
        }

        .filter-input {
            padding: 10px;
            border-radius: 5px;
            border: 1px solid #ccc;
        }


        /* Styles for Pagination */
        .pagination {
            display: flex;
            justify-content: center;
            list-style-type: none;
            padding: 0;
            margin-top: 20px;
        }

            .pagination li {
                margin: 0 5px;
            }

                .pagination li a {
                    text-decoration: none;
                    padding: 8px 16px;
                    border: 1px solid #ccc;
                    color: #007bff;
                    border-radius: 5px; /* Rounded corners */
                    transition: all 0.3s; /* Smooth transition for hover effect */
                }

                    .pagination li a.active, .pagination li a:hover:not(.disabled) {
                        background-color: #007bff;
                        color: white;
                    }

                    .pagination li a.disabled {
                        color: #ccc;
                        cursor: not-allowed;
                    }

    </style>
</head>
<body>
    <!-- Placeholder for Header -->
    <div id="header"></div>

    <!-- Main Content -->
    <main>
        <h2>Geographical Overview of NYC Air Quality</h2>

        <div class="actions">
            <!-- Filter input -->
            <input type="text" class="filter-input" id="cityFilter" placeholder="Filter by city..." onkeyup="fetchAirQualityRecords()" />

            <!-- Add new location button -->
            <button class="btn add" onclick="window.location.href='@Url.Action("AddOrEdit", "AirQualityData")'">Add New Data</button>
        </div>

        <!-- Locations Table -->
        <table class="overview-table" id="airQualityTable">
            <thead>
                <tr>
                    <th>Location Name</th>
                    <th>Last Recorded Quality</th>
                    <th>Actions</th>
                </tr>
            </thead>
            <tbody>
                <!-- Data will be loaded here -->
            </tbody>
        </table>

        <!-- Pagination -->
        <ul class="pagination" id="pagination">
            <!-- Pagination will be loaded here -->
        </ul>
    </main>
    <br />
    <br />
    <br />
    <br />
    <br />

    <script>
        document.addEventListener("DOMContentLoaded", fetchAirQualityRecords); // Fetch records when the page loads

        function changePage(page) {
            fetchAirQualityRecords(page);
        }

        function addNewLocation() {
            window.location.href = `add-edit-location.html`;
        }

        function editLocation(id) {
            const locationName = document.querySelector(`tr[data-id="${id}"] td:first-child`).textContent;
            const locationQuality = document.querySelector(`tr[data-id="${id}"] td:nth-child(2)`).textContent;
            window.location.href = `add-edit-location.html?id=${id}&name=${locationName}&quality=${locationQuality}`;
        }

        function viewDetails(locationId, indicator) {
            window.location.href = `AirQualityDetails/Index?locationId=${locationId}&indicator=${encodeURIComponent(indicator)}`;
        }

        function deleteLocation(locationId, indicator) {
            if (confirm("Are you sure you want to delete all records for this location and indicator?")) {
                // Call the backend API to delete the records
                fetch(`/AirQualityOverview/DeleteAirQualityRecords?locationId=${locationId}&indicator=${encodeURIComponent(indicator)}`, {
                    method: 'DELETE'
                })
                    .then(response => {
                        if (response.ok) {
                            // Reload the records after successful deletion
                            fetchAirQualityRecords();
                        } else {
                            alert('There was an error deleting the records.');
                        }
                    })
                    .catch(error => {
                        alert('There was an error deleting the records.');
                    });
            }
        }


        function fetchAirQualityRecords(page = 1) {
            const cityFilter = document.getElementById('cityFilter').value;
            fetch(`/AirQualityOverview/GetAirQualityRecords?page=${page}&cityFilter=${cityFilter}`)
                .then(response => response.json())
                .then(data => {
                    renderTableData(data);
                });
        }

        function renderTableData(data) {
            const tableBody = document.getElementById('airQualityTable').querySelector('tbody');
            tableBody.innerHTML = ''; // Clear existing data

            data.items.forEach(item => {
                const row = document.createElement('tr');
                row.setAttribute('data-id', item.locationId);
                row.innerHTML = `
                                    <td>${item.locationName}</td>
                                    <td>${item.lastRecordedQuality}</td>
                                    <td class="btn-container">
                                                        <button class="btn view" onclick="viewDetails(${item.locationId}, '${item.lastRecordedQuality}')">View</button>

                                                <button class="btn delete" onclick="deleteLocation(${item.locationId}, '${item.lastRecordedQuality}')">Delete</button>

                                    </td>
                                `;
                tableBody.appendChild(row);
            });

            renderPagination(data.currentPage, data.totalPages);
        }


        function renderPagination(currentPage, totalPages) {
            const pagination = document.getElementById('pagination');
            pagination.innerHTML = ''; // Clear existing pagination

            // Previous arrow
            pagination.innerHTML += `<li><a href="#" onclick="changePage(${currentPage - 1})" class="${currentPage === 1 ? 'disabled' : ''}">&laquo;</a></li>`;

            // Calculate the range of page numbers to display
            let startPage = Math.max(1, currentPage - 1);
            let endPage = Math.min(totalPages, currentPage + 1);

            // Adjust the range if we're at the start or end of the list of pages
            if (currentPage === 1) {
                endPage = Math.min(totalPages, currentPage + 2);
            } else if (currentPage === totalPages) {
                startPage = Math.max(1, currentPage - 2);
            }

            // Page numbers
            for (let i = startPage; i <= endPage; i++) {
                pagination.innerHTML += `<li><a href="#" onclick="changePage(${i})" class="${i === currentPage ? 'active' : ''}">${i}</a></li>`;
            }

            // Next arrow
            pagination.innerHTML += `<li><a href="#" onclick="changePage(${currentPage + 1})" class="${currentPage === totalPages ? 'disabled' : ''}">&raquo;</a></li>`;
        }


    </script>
</body>
</html>
